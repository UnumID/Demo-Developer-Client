version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
  slack: circleci/slack@4.4.2 # ref: https://github.com/CircleCI-Public/slack-orb, https://circleci.com/developer/orbs/orb/circleci/slack#usage-examples

jobs:
  test:
    docker:
      - image: circleci/node:14.15.0
    steps:
      - checkout
      - restore_cache: # ref: https://circleci.com/docs/2.0/caching/#restoring-cache
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1-npm-deps-

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}

      - run: npm ci

      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run:
          name: lint and test
          command: npm run test

  build-and-push-image:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
      api_url:
        type: string
        default: "https://developer-api.demo.dev-unum.id"
      issuer_uuid:
        type: string
        default: "d14ca24c-5323-4b79-9dfa-6471b014d68c"
      verifier_uuid:
        type: string
        default: "c1bbf50a-7bf8-4dbb-a450-6518e3f20747"
      log_rocket_id:
        type: string
        default: "vm6x8i/developer-demo-client-dev"


    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - add_ssh_keys:
          fingerprints:
            - "5a:69:7f:35:c4:4a:32:59:9b:e7:5f:0e:9c:7f:f1:44"
      - run:
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" \
            --build-arg API_URL=<< parameters.api_url >> \
            --build-arg ISSUER_UUID=<< parameters.issuer_uuid >> \
            --build-arg VERIFIER_UUID=<< parameters.verifier_uuid >> \
            --build-arg HOLDER_APP_UUID=${DEV_HOLDER_APP_UUID} \
            --build-arg API_KEY=${DEV_API_KEY} \
            --build-arg ENV="development" \
            --build-arg LOG_ROCKET_ID=<< parameters.log_rocket_id >> \
            -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:dev-latest
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:dev-"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:dev-"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            docker push << parameters.reg >>/<< parameters.repo >>:dev-latest
          name: Update container image

  build-and-push-image-release:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
      api_url:
        type: string
        default: "https://developer-api.demo.unum.id"
      issuer_uuid:
        type: string
        default: "ba63eef3-58e7-4964-bd62-75948de5fa67"
      verifier_uuid:
        type: string
        default: "ccc5a558-a943-4c99-ba33-38fe600246db"
      log_rocket_id:
        type: string
        default: "vm6x8i/developer-demo-client-sandbox"

    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - add_ssh_keys:
          fingerprints:
            - "5a:69:7f:35:c4:4a:32:59:9b:e7:5f:0e:9c:7f:f1:44"
      - run:
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" \
            --build-arg API_URL=<< parameters.api_url >> \
            --build-arg ISSUER_UUID=<< parameters.issuer_uuid >> \
            --build-arg VERIFIER_UUID=<< parameters.verifier_uuid >> \
            --build-arg HOLDER_APP_UUID=${SANDBOX_HOLDER_APP_UUID} \
            --build-arg API_KEY=${SANDBOX_API_KEY} \
            --build-arg ENV="sandbox" \
            --build-arg LOG_ROCKET_ID=<< parameters.log_rocket_id >> \
            -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:sandbox-latest
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:sandbox-"${CIRCLE_TAG}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:sandbox-"${CIRCLE_TAG}"
            docker push << parameters.reg >>/<< parameters.repo >>:sandbox-latest
          name: Update container image

  deploy-image:
    parameters:
      cluster-name:
        type: string
        default: "dev-customer-cluster"
      repo:
        type: string
      deployment:
        type: string
    executor: aws-eks/python3
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          aws-region: ${AWS_REGION}
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl set image deployment/<< parameters.deployment >> << parameters.deployment >>=${AWS_ECR_URL}/<< parameters.repo >>:"dev-${CIRCLE_BRANCH}-${CIRCLE_PREVIOUS_BUILD_NUM}"

            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
          name: Deploy container image to dev
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  deploy-image-release:
    parameters:
      cluster-name:
        type: string
        default: "sandbox-customer-cluster"
      repo:
        type: string
      deployment:
        type: string
      namespace:
        type: string

    executor: aws-eks/python3
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          aws-region: ${AWS_REGION}
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl set image deployment/<< parameters.deployment >> << parameters.deployment >>=${AWS_ECR_URL}/<< parameters.repo >>:sandbox-"${CIRCLE_TAG}" -n << parameters.namespace >>
            
            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment >> -n << parameters.namespace >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
          name: Deploy container image to sandbox
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  build-and-deploy-release:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - build-and-push-image-release:
          requires:
            - test
          context: AWS-Dev
          repo: demo-developer-client
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-image-release:
          requires:
            - build-and-push-image-release
          context:
            - AWS-Dev
            - Slack-Context
          repo: demo-developer-client
          deployment: demo-developer-client
          namespace: demos
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  test:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - main
                - test-circleci
                - sandbox

  build-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
                - test-circleci
                - sandbox
      - build-and-push-image:
          requires:
            - test
          context: AWS-Dev
          repo: demo-developer-client
          filters:
            branches:
              only:
                - main
                - test-circleci

      - deploy-image:
          context:
            - AWS-Dev
            - Slack-Context
          repo: demo-developer-client
          deployment: demo-developer-client
          requires:
            - build-and-push-image
          filters:
            branches:
              only:
                - main
                - test-circleci
